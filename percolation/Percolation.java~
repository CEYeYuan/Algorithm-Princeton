public class Percolation {
	/*private int[] id;
	private int[] size;*/
	WeightedQuickUnionUF percolate;
	boolean[] open;
	int N;
   public Percolation(int N) throws IndexOutOfBoundsException{
   	    if (N<=0){
   	    	throw new IndexOutOfBoundsException();
   	    }

   	    else{
   	    	open=new boolean[N*N+2];
   	    	this.N=N;
   	    	WeightedQuickUnionUF percolate=new WeightedQuickUnionUF(N*N+2);
   	    	for (int i=0;i<N+1;i++){
   	    		percolate.union(0,i);
   	    	}
   	    	for(int i=N*N-N+1;i<=N*N+1;i++){
   	    		percolate.union(N*N+1,i);
   	    	}
   	    	/*id=new int[N*N+2];
   			size=new int[N*N+2];
   			open=new boolean[N*N+2];*/
   			for (int i=0;i<N*N+2;i++){
   			//id[i]=i;
   			//size[i]=1;
   			open[i]=false;
   			}
   			/*for(int i=0;i<N+1;i++){
   			size[i]=N+1;
   			id[i]=0;
   			}
   			for(int i=N*N-N+1;i<N*N+2;i++){
   			size[i]=N+1;
   			id[i]=N*N+1;
   			}*/

   	    }
   		
   	
   }               // create N-by-N grid, with all sites blocked
   public void open(int i, int j)   {
   		open[(i-1)*N+j]=true;
   		if (1<i&&i<N&&1<j&&i<N){
   			percolate.union((i-1)*N+j,(i-2)*N+j);
			percolate.union((i-1)*N+j,i*N+j);
			percolate.union((i-1)*N+j,(i-1)*N+j-1);
			percolate.union((i-1)*N+j,(i-1)*N+j+1);
   		}
   		else{
   			if(i==1){
   				if (j==1){
   					if(isOpen(i,j+1))
   					percolate.union((i-1)*N+j,(i-1)*N+j+1);
   					if(isOpen(i+1,j))
   					percolate.union((i-1)*N+j,(i)*N+j);
   				}
   				else if (j==N){
   					if(isOpen(i,j-1))
   					percolate.union((i-1)*N+j,(i-1)*N+j-1);
   					if(isOpen(i+1,j))
   					percolate.union((i-1)*N+j,(i)*N+j);
   				}
   				else{
   					if(isOpen(i,j-1))
   					percolate.union((i-1)*N+j,(i-1)*N+j-1);
   					if(isOpen(i,j+1))
   					percolate.union((i-1)*N+j,(i-1)*N+j+1);
   					if(isOpen(i+1,j))
   					percolate.union((i-1)*N+j,(i)*N+j);

   				}
   			}
   			else if (i==N){
   				if (j==1){
   					if(isOpen(i,j+1))
   					percolate.union((i-1)*N+j,(i-1)*N+j+1);
   					if(isOpen(i-1,j))
   					percolate.union((i-1)*N+j,(i-2)*N+j);
   				}
   				else if (j==N){
   					if(isOpen(i,j-1))
   					percolate.union((i-1)*N+j,(i-1)*N+j-1);
   					if(isOpen(i-1,j))
   					percolate.union((i-1)*N+j,(i-2)*N+j);
   				}
   				else{
   					if(isOpen(i,j-1))
   					percolate.union((i-1)*N+j,(i-1)*N+j-1);
   					if(isOpen(i,j+1))
   					percolate.union((i-1)*N+j,(i-1)*N+j+1);
   					if(isOpen(i-1,j))
   					percolate.union((i-1)*N+j,(i-2)*N+j);

   				}

   			}
   			else{
   				if(j==1){
   					if(isOpen(i,j+1))
   					percolate.union((i-1)*N+j,(i-1)*N+j+1);
   					if(isOpen(i+1,j))
   					percolate.union((i-1)*N+j,(i)*N+j);
   					if(isOpen(i-1,j))
   					percolate.union((i-1)*N+j,(i-2)*N+j);

   				}
   				else{//j==N
   					if(isOpen(i,j-1))
   					percolate.union((i-1)*N+j,(i-1)*N+j-1);
   					if(isOpen(i+1,j))
   					percolate.union((i-1)*N+j,(i)*N+j);
   					if(isOpen(i-1,j))
   					percolate.union((i-1)*N+j,(i-2)*N+j);

   				}
   			}
   		}

   }       // open site (row i, column j) if it is not open already
   public boolean isOpen(int i, int j){
   	return open[(i-1)*N+j];
   }     // is site (row i, column j) open?
   public boolean isFull(int i, int j)  {
   	return !open[(i-1)*N+j];
   }   // is site (row i, column j) full?
   public boolean percolates()      {
   	return  percolate.connected(0,N*N+1);

   }       // does the system percolate?

   public static void main(String[] args)  {

   } // test client (optional)
}
